{"meta":{"title":"纪国锐","subtitle":null,"description":null,"author":"Paris Jee","url":"http://paris-jee.github.io"},"pages":[{"title":"about","date":"2018-06-26T08:14:11.000Z","updated":"2018-06-26T08:14:11.222Z","comments":true,"path":"about/index.html","permalink":"http://paris-jee.github.io/about/index.html","excerpt":"","text":""}],"posts":[{"title":"json 转换","slug":"json-转换","date":"2018-07-16T04:00:51.000Z","updated":"2018-07-16T04:11:27.809Z","comments":true,"path":"2018/07/16/json-转换/","link":"","permalink":"http://paris-jee.github.io/2018/07/16/json-转换/","excerpt":"","text":"jsonJSON字符串转化成对象解析 1、定义：是指将符合 JSON 语法规则的字符串转换成对象的过程。 2、不同的编程语言都提供了解析 JSON 字符串的方法，在这里主要讲解 JavaScript 中的解析方法。主要有三种： 1）- 使用 eval() 2）- 使用 JSON.parse() 3）- 使用第三方库，例如 JQuery 等 evaleval() 1、eval() 函数的参数是一个字符串，其作用是直接执行其中的 JavaScript 代码。 2、eval() 能够解析 JSON 字符串。从这里也可以看得出，JSON 和 JavaScript 是高度嵌合的。 3、但是，现在已经很少直接使用 eval() 来解析了，如果您的浏览器版本真的是很旧，可能才需要这个方法。此外，eval() 是一个相对危险的函数，因为字符串中可能含有未知因素。在这里，作为学习，还是要知道这也是一种方法。 4、请注意 eval() 的参数，在字符串两旁加了括号，这是必须的，否则会报错。 5、因为 JSON 字符串是被大括号（“{}”）包围的，直接放到 eval() 会被当成语句块来执行，因此要在两旁加上括号，使其变成表达式。1234567&lt;script&gt;var str = “console.log(‘hello’)”;eval(sre);&lt;/script&gt; JSON.parse()123456789&lt;script&gt;var str = ‘&#123; “name” : “Geoff Lui”,“age” : 26&#125;’; //符合JSON语法规则的字符串var obj = JSON.parse(str);console.log(obj);&lt;/script&gt; 如果输入了不符合规范的字符串，会报错 JSON.parse() 可以有第二个参数，是一个函数。此函数有两个参数：name 和 value，分别代表名称和值。当传入一个 JSON 字符串后，JSON 的每一组名称/值对都要调用此函数。该函数有返回值，返回值将赋值给当前的名称（name）。 利用第二个参数，可以在解析 JSON 字符串的同时对数据进行一些处理。 JSON对象转化为字符串序列化定义 指将 JavaScript 值转化为 JSON 字符串的过程。 JSON.stringify() 能够将 JavaScript 值转换成 JSON 字符串。JSON.stringify() 生成的字符串可以用 JSON.parse() 再还原成 JavaScript 值。 参数的含义 1）JSON.stringify(value[, replacer[, space]]) 2）value：必选参数。被变换的 JavaScript 值，一般是对象或数组。 3）replacer：可以省略。有两种选择：函数或数组。 ①- 如果是函数，则每一组名称/值对都会调用此函数，该函数返回一个值，作为名称的值变换到结果字符串中，如果返回 undefined，则该成员被忽略。 ②-如果是数组，则只有数组中存在名称才能够被转换，且转换后顺序与数组中的值保持一致。 4）space：可以省略。这是为了排版、方便阅读而存在的。可以在 JSON 字符串中添加空白或制表符等。1234567891011121314151617&lt;script&gt;var obj = &#123;name : “Geoff Lui”,age : 26&#125;;console.log(obj);var jsonstr = JSON.stringify(obj);console.log(jsonstr);&lt;/script&gt; replacer 的用法123456789101112131415161718192021222324252627&lt;script&gt;var obj = &#123;name : “Geoff Lui”,age : 26&#125;;console.log(obj);var jsonstr = JSON.stringify(obj,fun);function fun(name, value)&#123;If (name == “age” )value = 14;return value;&#125;console.log(jsonstr);&lt;/script&gt; 123456789101112131415161718192021&lt;script&gt;var obj = &#123;a : 1,b : 2,c : 3,d :4&#125;;console.log(obj);var jsonstr = JSON.stringify(obj,[“a”,”b”,”c”]);console.log(jsonstr);&lt;/script&gt; space 的用法 //排列的更加可读123456789101112131415161718192021&lt;script&gt;var obj = &#123;a : 1,b : 2,c : 3,d :4&#125;;console.log(obj);var jsonstr = JSON.stringify(obj,[“a”,”b”,”c”], “one”);console.log(jsonstr);&lt;/script&gt;","categories":[],"tags":[{"name":"JSON","slug":"JSON","permalink":"http://paris-jee.github.io/tags/JSON/"}]},{"title":"json 语法","slug":"json-语法","date":"2018-07-16T03:53:09.000Z","updated":"2018-07-16T04:01:08.141Z","comments":true,"path":"2018/07/16/json-语法/","link":"","permalink":"http://paris-jee.github.io/2018/07/16/json-语法/","excerpt":"","text":"json 语法1）- 数组（Array）用方括号(“[]”)表示。 2）- 对象（Object）用大括号（”{}”）表示。 3）- 名称/值对（name/value）之间用冒号（”：”）隔开。 4）- 名称（name）置于双引号中，值（value）有字符串、数值、布尔值、null、对象和数组。 5）- 并列的数据之间用逗号（“,”）分隔 对象1、对象用大括号（“{}”）括起来，大括号里是一系列的“名称/值对” 2、两个并列的数据之间用逗号（“,”）隔开，注意两点： 1）- 使用英文的逗号（“,”），不要用中文的逗号（“，”） 2）- 最后一个“名称/值对“之后不要加逗号 12345&#123;“name”:”Lucy”, //值必须用双引号“age”: 25&#125; 数组数组表示一系列有序的值，用方括号（“[]”）包围起来，并列的值之间用逗号分隔1[1,2,[1,2],&#123;“aa”:1&#125;] 名称/值对（Name/Value）1、名称（Name）是一个字符串，要用双引号括起来，不能用单引号，也不能没有引号，这一点与 JavaScript 不同。 2、值的类型只有七种：字符串（string）、数值（number）、对象（object）、数组（array）、true、false、null。不能有这之外的类型，例如 undefined、函数等。请看概念图。 3、字符串（string）的规则如下： 1）- 英文双引号括起来，不能用单引号，也不能没有。 2）- 字符串中不能单独出现双引号（”） 和右斜杠（“\\”）。 3）- 如果要打双引号或右斜杠，需要使用“右斜杠+字符”的形式，例如 \\” 和 \\，其它的转义字符也是如此 12345 &#123;“string”: ”one two” //字符串中间不可以加双引号，一定要用的时候，用转义字符“\\”&#125;","categories":[],"tags":[{"name":"JSON","slug":"JSON","permalink":"http://paris-jee.github.io/tags/JSON/"}]},{"title":"JSON","slug":"JSON","date":"2018-07-16T03:25:53.000Z","updated":"2018-07-16T03:47:36.859Z","comments":true,"path":"2018/07/16/JSON/","link":"","permalink":"http://paris-jee.github.io/2018/07/16/JSON/","excerpt":"","text":"JSON JSON，全称是 JavaScript Object Notation，即 JavaScript 对象标记法。 JSON 是一种轻量级（Light-Weight）、基于文本的（Text-Based）、可读的（Human-Readable）格式。 JSON 的名称中虽然带有 JavaScript，但这是指其语法规则是参考 JavaScript 对象的，而不是指只能用于 JavaScript 语言。 JSON 无论对于人，还是对于机器来说，都是十分便于阅读和书写的，而且相比 XML （另一种常见的数据交换格式），文件更小，因此迅速成为网络上十分流行的交换格式。 json 语法规则1）- 数组（Array）用方括号(“[]”)表示。 2）- 对象（Object）用大括号（”{}”）表示。 3）- 名称/值对（name/value）组合成数组和对象。 4）- 名称（name）置于双引号中，值（value）有字符串、数值、布尔值、null、对象和数组。名称/值对（name/value）之间用冒号（”：”）隔开。 5）- 并列的数据之间用逗号（“,”）分隔 实例 { “name”: “Geoff Lui”, “age”: 26 } json &amp; xmlJSON 常被拿来与 XML 做比较，因为 JSON 的诞生本来就多多少少要有取代 XML 的意思。相比 XML，JSON 的优势如下： 1）- 没有结束标签，长度更短，读写更快 2）- 能够直接被 JavaScript 解释器解析 3）- 可以使用数组 对比JSON和XML，比较相同与相异之处 json123456789&#123;&quot;name&quot;: &quot;parisjee&quot;,&quot;age&quot;: 23,&quot;friends&quot;: [&quot;Lily&quot;, &quot;Lucy&quot;, &quot;zero&quot;]&#125; xml12345678910111213141516&lt;root&gt;&lt;name&gt;parisjee&lt;/name&gt;&lt;age&gt;23&lt;/age&gt;&lt;friends&gt;Lily&lt;/friends&gt;&lt;friends&gt;Lucy&lt;/friends&gt;&lt;friends&gt;zero&lt;/friends&gt;&lt;/root&gt;``` ## json 解析与生成 在 JavaScript 中，有两个方法与此相关： **JSON.parse** 和 **JSON.stringify** 。 var str = ‘{“name”: “Geoff Lui”,”age”: 26,}’; var obj = ISON.parse(str); console.log(obj); var jsonstr = ISON.stringify(obj); console.log(jsonstr); `","categories":[{"name":"JSON","slug":"JSON","permalink":"http://paris-jee.github.io/categories/JSON/"}],"tags":[{"name":"JSON","slug":"JSON","permalink":"http://paris-jee.github.io/tags/JSON/"}]},{"title":"常量","slug":"常量","date":"2018-07-04T22:59:19.000Z","updated":"2018-07-04T23:23:30.849Z","comments":true,"path":"2018/07/05/常量/","link":"","permalink":"http://paris-jee.github.io/2018/07/05/常量/","excerpt":"","text":"常量常量也是一个简单值的标识符，正好和变量相反，在脚本执行期间这个值不能改变，也就是我们常量的值一经定义是不能对它进行重新赋值，这就是常量。 系统常量 自定义常量 魔术常量 1.常量的名称前面是没有这个$符号的2.我们的常量名称呢同样也是以字母或者下划线开始，尽量使用大写字母。3.常量可以在任何地方定义和使用。4.还有就是需要注意的就是常量一经定义不能改变。也不能取消这个定义。5.我们常量的值只能是标量，虽然说也可以使用我们的资源，但是呢我们尽量的不要去使用这个资源，更常用的呢我们常量的值用标量作为我们的值。像我们的整型、浮点类型、布尔类型，包括我们的字符串类型可以当做我们的常量的值。6.常量默认是不区分大小写的，如果需要区分大小写通过给define函数的第三个参数为true实现。 define函数定义常量constant($name)来得到这个常量的值defined(‘TEST‘)，返回值真或假PHP5.3.0以后了我们还可以通过const来定义一个常量，那之前呢const可以在类里面来定义常量，那在我们5.3.0之后呢可以使用const在类定义之外定义","categories":[],"tags":[{"name":"PHP 常量","slug":"PHP-常量","permalink":"http://paris-jee.github.io/tags/PHP-常量/"}]},{"title":"php变量","slug":"PHP变量","date":"2018-07-04T22:18:13.000Z","updated":"2018-07-04T23:22:50.524Z","comments":true,"path":"2018/07/05/PHP变量/","link":"","permalink":"http://paris-jee.github.io/2018/07/05/PHP变量/","excerpt":"","text":"变量在程序执行期间，可以变化的量。 声明变量：在php中是以$符加上变量名称 如 $a变量的名称以字母或者下划线开始，后面呢可以跟上数字、字母、下划线，这样的形式。不要包含特殊字符，什么是特殊字符呢？空格啊、叹号、*号啊、问号啊这样的都是我们的特殊字符 变量名称，严格区分大小写，什么意思呢，$a 和 $A 这是两个变量当变量名称重复的时候，相当于变量重新赋值了，后面的会覆盖之前的值php是弱类型语言,像Java，c 变量一定要声明之后才能使用，而弱类型语言比较松散，变量可以不用声明直接使用 可变变量 123456&lt;?php //可变变量的例子 $a=&apos;b&apos;; $b=&apos;c&apos;; $c=&apos;d&apos;; echo $$$a; 引用赋值 销毁变量函数unset($var):注销变量","categories":[{"name":"PHP","slug":"PHP","permalink":"http://paris-jee.github.io/categories/PHP/"}],"tags":[{"name":"PHP 变量","slug":"PHP-变量","permalink":"http://paris-jee.github.io/tags/PHP-变量/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-06-10T09:00:29.178Z","updated":"2018-06-10T09:00:29.179Z","comments":true,"path":"2018/06/10/hello-world/","link":"","permalink":"http://paris-jee.github.io/2018/06/10/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"PHP","slug":"one","date":"2017-06-17T16:00:00.000Z","updated":"2018-07-01T04:16:16.982Z","comments":true,"path":"2017/06/18/one/","link":"","permalink":"http://paris-jee.github.io/2017/06/18/one/","excerpt":"PHPPHP最早是 personal home page 的缩写，现在改称为Hypertext Proprecessor,即超文本预处理语言。PHP代码可嵌入HTML代码中 Thread safe(线程安全)简称TS和 Non Thread Safe（非线程安全）TS执行时会进行安全检查，以防止有新的请求就启动新线程的CGI执行方式而耗尽系统资源。NTS在执行时不进行线程安全检查。 PHP的两种执行方式ISAPI 和FastCGI。 PHP代码必须定义在执行块中才能执行，PHP有多种定义PHP执行块的方法a. 标准标签&lt;?php//这里写代码?&gt;b. 短标签&lt;?//这里写代码?&gt;短标签可以在php.ini文件中设置 short_tag_on 来开启。LInux/unix 系统采用多进程的工作方式，Windows系统采用多线程的工作方式。","text":"PHPPHP最早是 personal home page 的缩写，现在改称为Hypertext Proprecessor,即超文本预处理语言。PHP代码可嵌入HTML代码中 Thread safe(线程安全)简称TS和 Non Thread Safe（非线程安全）TS执行时会进行安全检查，以防止有新的请求就启动新线程的CGI执行方式而耗尽系统资源。NTS在执行时不进行线程安全检查。 PHP的两种执行方式ISAPI 和FastCGI。 PHP代码必须定义在执行块中才能执行，PHP有多种定义PHP执行块的方法a. 标准标签&lt;?php//这里写代码?&gt;b. 短标签&lt;?//这里写代码?&gt;短标签可以在php.ini文件中设置 short_tag_on 来开启。LInux/unix 系统采用多进程的工作方式，Windows系统采用多线程的工作方式。","categories":[{"name":"PHP","slug":"PHP","permalink":"http://paris-jee.github.io/categories/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://paris-jee.github.io/tags/PHP/"},{"name":"基本概念","slug":"基本概念","permalink":"http://paris-jee.github.io/tags/基本概念/"}]}]}